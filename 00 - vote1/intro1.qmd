---
title: "Introducción a R y RStudio"
author: "José Pernías"
lang: es
toc-title: Contenido
toc: true
number-sections: true
number-depth: 3
format: 
  html:
    theme: flatly
    embed-resources: true
  pdf:
    papersize: a4
format-links: false
---

## Introducción

En este documento se presentan algunas de las tareas comunes a la hora de realizar un trabajo empírico. También se introduce la utilización de R y RStudio.

## Instalación  y configuración

En este curso utilizaremos en los laboratorios el lenguaje de programación R y el programa RStudio que proporciona un excelente marco de trabajo para R.  

### Instalación 

Tanto R como RStudio se encuentran disponibles gratuitamente para Windows, macOS y Linux. Es recomendable utilizar versiones recientes de estos programas. En el caso de R, se recomienda la versión 4.1.0 o superior y puede descargarse desde la página de [CRAN](https://cran.r-project.org). 

![](screenshots/CRAN.png)

Después de instalar R, se puede descargar RStudio desde su [página web](https://posit.co/download/rstudio-desktop/).

![](screenshots/RStudio.png)

Una vez instalado, al abrir RStudio nos presenta una ventana con varios paneles:

![](screenshots/Rstudio-init.png)
En el panel de la izquierda se encuentra la **consola R** donde podemos escribir instrucciones y ejecutarlas inmediatamente. En la derecha, se encuentran dos paneles donde podemos acceder a otras funcionalidades de RStudio.


### Configuración

Antes de empezar a trabajar con RStudio es conveniente ajustar algunas opciones que frecuentemente causan errores para los que no se encuentra la causa con facilidad. Con el menú `Tools | Global Options...` accedemos a un cuadro de diálogo desde el cual podemos ajustar la configuración de RStudio:

1. En `General | Basic` desactivamos la opción `Restore .Rdata into workspace at startup`.

2. También en `General | Basic` seleccionamos la opción `Never` en el desplegable `Save workspace to .RData on exit`.

3. En `Code | Saving` nos aseguramos de que `Default text encoding` se ha fijado al valor `UTF-8`


Después de realizar estos cambios el cuadro de diálogo debe quedar como muestra las siguientes figuras:

::: {layout-ncol=2}

![](screenshots/Options.png){width=100%}

![](screenshots/Options-UTF.png){width=100%}
:::


### Scripts

Es preferible no trabajar con la consola e ir escribiendo las instrucciones que necesitemos en un archivo de texto (*script*). Para crear un nuevo script usamos el menú `File | New File > | R Script` o usamos el icono que aparece en la esquina superior izquierda de la ventana de RStudio:

![](screenshots/New-menu.png){fig-align="center" width=25%}

Una vez creado, el nuevo script se muestra en un nuevo panel y ya podemos escribir instrucciones en él:

![](screenshots/new.png)

Para ejecutar una línea o una región desde un script utilizamos la combinación de teclas `Ctrl+Enter` en Windows o `Cmd+return` en macOS.

## Objetivo

En esta sesión trataremos de examinar la relación que existe entre los resultados electorales y los gastos de campaña. Los datos con los que trabajaremos fueron recogidos por Jeffrey Wooldridge y se utilizan en varias secciones de su manual. En concreto el objetivo será determinar si los candidatos pueden influir en los resultados de las votaciones gastando más dinero en sus campañas electorales o si, por el contrario, las decisiones de los votantes no se ven afectados por los gastos de campaña.


## Datos

En un estudio empírico necesitamos datos y una de las primeras tareas es leer los datos que queremos analizar. En esta sesión consideraremos la opción de utilizar **paquetes** de datos. Aunque es una opción que no siempre está disponible, es una de las formas más sencillas de acceder a bases de datos en R.

### Paquetes

Los **paquetes** (*packages*) son colecciones de bases de datos o de código desarrollados por la comunidad de usuarios de R. Se pueden acceder a ellos libremente desde diferentes **repositorios**, sitios de Internet que se especializan en almacenar paquetes. El más importante es [CRAN](https://cran.r-project.org). 

RStudio facilita la descarga e instalación de paquetes. Para ello se puede usar el menú `Tools | Install packages...` o el icono que aparece en la esquina superior izquierda del panel `Packages`.

![](screenshots/install-icon.png)


Accedemos así a  un cuadro de diálogo donde podemos escribir los nombres de los paquetes que queremos instalar:


![](screenshots/install.png){fig-align="center" width=50%}

Una vez instalado un paquete no es necesario volver a hacerlo cada vez que se quiera utilizar. Los paquetes **se instalan una vez pero se usan muchas veces**.

A lo largo del curso utilizaremos con frecuencia el paquete `wooldridge` que contiene las bases de datos que se utilizan en el manual de Wooldridge. Una vez instalado un paquete utilizamos la función `library` para poder usar las funciones o los datos que contiene. En nuestro caso cargamos el paquete `wooldridge`:
```{r}
library(wooldridge)
```


### Base de datos

En esta sesión utilizaremos la base de datos `vote1` que contiene información sobre las elecciones de Estados Unidos de 1988 con las que se renovó la Cámara de Representantes. En concreto, se dispone de información sobre los resultados electorales en 173 distritos electorales en los que sólo se presentaban un candidato del Partido Demócrata y otro del Partido Republicano:

- $\mathit{voteA}$: es el porcentaje de votos recibidos por uno de los candidatos, el candidato A.

- $\mathit{expendA}, \mathit{expendB}$: gastos de campaña, en miles de dólares, del candidato A y del candidato B, respectivamente.

- $\mathit{democA}$: variable ficticia que toma el valor 1 si A es el candidato del Partido Demócrata.

- $\mathit{prtystrA}$: el porcentaje de votos que obtuvo el partido de A en las elecciones presidenciales más recientes. Con esta variable se trata de medir la fuerza del partido del candidato A en el distrito electoral.

Después de cargar el paquete `wooldridge` podemos acceder a la base de datos `vote1` con la función `data`:
```{r}
data(vote1)
```

Podemos comprobar que la base de datos se ha cargado en memoria correctanente consultando el panel `Environment` donde se reflejan todos los objetos que están siendo usados en la sesión actual de R.

![](screenshots/env-data.png)

Podemos ver la estructura de un objeto de R con la función `str`:
```{r}
str(vote1)
```
Esta función describe el objeto `vote1`: es un `data.frame` (una base de datos) con 173 observaciones y 10 variables. También podemos ver los nombres de las variables que conforman `vote1` y los primeros valores de las variables.

Otra forma de examinar los contenidos de una base de datos es la función `head` que imprime las primeras filas de la base de datos (la función `tail` es similar pero imprime las últimas observaciones):
```{r}
head(vote1)
```

## Análisis estadístico 

En esta sesión introduciremos los métodos estadísticos más básicos.

### Estadísticos descriptivos

La función `summary` proporciona un resumen de un objeto de R. Cuando se utiliza con una base de datos proporciona algunos estadísticos descriptivos de las variables de la base de datos:
```{r}
summary(vote1)
```
Más adelante discutiremos cómo obtener otros estadísticos descriptivos y cómo presentarlos de una forma más adecuada. 

### Gráficos

Con R se pueden producir gráficos muy sofisticados. En este curso utilizaremos las funciones proporcionadas por el paquete `ggformula`. Este paquete no viene instalado por defecto en R y antes de poder usarlo hay que instalarlo manualmente. Una vez instalado, lo cargamos con `library`:

```{r}
#| message: false

library(ggformula)
```

Podemos representar un gráfico de dispersión de los votos obtenidos por el candidato A, $\mathit{voteA}$, con respecto a sus gastos de campaña, $\mathit{expendA}$, utilizando la función `gf_point`. El primer argumento de esta función es una **fórmula** que describe qué variables queremos representar. Indicamos los nombres de la variable del eje vertical y del eje horizontal separadas por el carácter `~` (`AltGr + 4` en un teclado para Windows: `option + ñ` en teclados para Mac).  También indicamos en qué base de datos se encuentran las variables del modelo con el argumento `data`:

```{r}
#| fig-align: "center"

gf_point(voteA ~ expendA, data = vote1)
```


### Regresión simple

Estimaremos por mínimos cuadrados ordinarios, MCO, los parámetros del modelo de regresión simple:
$$
  \mathit{voteA} = \beta_0 + \beta_1 \mathit{expendA} + u
$$
Con la función `lm` (*linear models*) podemos estimar modelos lineales por MCO. El primer argumento de esta función es una **fórmula** que describe el modelo que queremos estimar. Para especificar un modelo de regresión simple usamos una fórmula donde aparece la variable dependiente y la explicativa separadas por el carácter `~` (`AltGr + 4` en un teclado para Windows: `option + ñ` en teclados para Mac).  También indicamos en qué base de datos se encuentran las variables del modelo con el argumento `data`:
```{r}
lm(voteA ~ expendA, data = vote1)
```
Utilizada así, la función `lm` no es muy útil: sólo imprime los valores de las estimaciones de los parámetros. A partir de esa información podemos escribir el modelo de regresión en forma de ecuación:
$$
  \mathit{\widehat{vote}A} = 43{,}2 + 0{,}024 \,\mathit{expendA},
$$
pero no tenemos acceso a otros resultados de la estimación (errores típicos, medidas de bondad de ajuste, contrastes sobre los parámetros). Generalmente, guardaremos lo resultados de las estimaciones que realizamos en objetos de R. Para guardar el resultado de una función en una variable de R usamos el operador de asignación `<-`. La siguiente instrucción asigna el resultado de `lm` a la variable `mod1`:
```{r}
mod1 <- lm(voteA ~ expendA, data = vote1)
```
Después de ejecutar esta instrucción, R no imprime nada en la consola pero los resultados se han guardado en la memoria como puede comprobarse en el panel `Environment`:

![](screenshots/env-mod.png)


Para ver los resultados detallados de la estimación usamos la función `summary` con el objeto `mod1` como argumento:
```{r}
summary(mod1)
```

Podemos acceder a diferentes elementos del modelo de regresión utilizando funciones sobre la variable `mod1`. Por ejemplo, la función `resid` obtiene los residuos de un modelo de regresión:
```{r}
uhat1 <- resid(mod1)
```
Después de ejecutar esa instrucción tenemos en memoria la variable `uhat1` con los residuos de nuestro modelo de regresión simple. Podemos usar esa variable en otras funciones: por ejemplo, podemos obtener un gráfico de los residuos frente a la variable explicativa:
```{r}
#| fig-align: "center"

gf_point(uhat1 ~ expendA, data = vote1)
```
